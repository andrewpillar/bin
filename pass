#!/bin/sh

argv0="$(basename "$0")"

if ! hash age; then
	>&2 printf "%s: could not fine age binary\n" "$argv0"
	exit 1
fi

AGEDIR="$HOME/.age"
AGEKEY="$AGEDIR/id"
PASSDIR="$HOME/.agepass"

storedir="$PASSDIR/store"

_initialized() {
	if [ ! -d "$PASSDIR" ]; then
		>&2 printf "%s: not initialized\n" "$argv0"
		exit 1
	fi
}

_check() {
	if [ ! -f "$storedir/$1" ]; then
		>&2 printf "%s: password not found\n" "$argv0"
		exit 1
	fi
}

_pubkey() (
	grep "public key: " "$(cat "$PASSDIR/key")" | awk '{ print $4 }'
)

_privkey() (
	cat "$PASSDIR/key"
)

_usage() {
	printf "Usage:\n"
	printf "    pass <command> <args...>\n\n"
	printf "Commands:\n"
	printf "    export <key>  Export the password store\n"
	printf "    get <name>    Get the given password\n"
	printf "    import        Import an exported password store\n"
	printf "    init          Initialize a new password store\n"
	printf "    rm <names...> Remove the password(s)\n"
	printf "    rot <name>    Rotate the given password\n"
	printf "    set <name>    Add a password with the alias\n"
}

init_cmd() (
	if [ -d "$PASSDIR" ]; then
		>&2 printf "%s: already initialized\n" "$argv0"
		exit 1
	fi

	mkdir -p "$storedir"

	echo "$AGEKEY" > "$PASSDIR"/key
)

_read() {
	exec < /dev/tty

	settings=$(stty -g)
	trap 'stty "$settings"' EXIT INT TERM

	stty -echo

	IFS= read -r line

	echo > /dev/tty

	printf "%s" "$line"
}

set_cmd() (
	_initialized

	name="$1"

	if [ -z "$name" ]; then
		>&2 printf "usage: pass set <name>\n"
		exit 1
	fi

	printf "Enter password: "

	password=$(_read)

	file="$storedir/$name"
	dir="$storedir/$(dirname "$name")"

	if [ -f "$dir" ]; then
		>&2 printf "%s: password already exists for %s\n" "$argv0" "$(dirname "$name")"
		exit 1
	fi

	mkdir -p "$dir"
	echo "$password" > "$file"

	age -r "$(_pubkey)" "$file" > "$file.age"

	mv "$file.age" "$file"
)

get_cmd() (
	_initialized

	name="$1"

	if [ -z "$name" ]; then
		>&2 printf "usage: pass get <name>\n"
		exit 1
	fi

	_check "$name"

	pass="$(age -d -i "$(_privkey)" "$storedir/$name")"

	if [ -t 1 ]; then
		echo "$pass"
	else
		echo -n "$pass"
	fi
)

ls_cmd() (
	_initialized

	for f in $(find "$storedir" -type f); do
		echo "$f" | sed "s!$storedir!!" | tail -c +2
	done
)

export_cmd() (
	_initialized

	key="$1"

	if [ -z "$key" ]; then
		>&2 printf "usage: pass export <key>\n"
		exit 1
	fi

	tmp="$(mktemp -d)"

	for f in $(find "$storedir" -type f); do
		dir="$(echo "$tmp/$(dirname "$f")" | sed "s!$HOME/!!")"

		mkdir -p "$dir"

		age -d -i "$(_privkey)" "$f" | age -r "$key" > "$dir"/"$(basename "$f")"
	done

	dir="$(pwd)"
	cd "$tmp"

	tar -czf agepass.tar.gz .agepass
	mv agepass.tar.gz "$dir"

	cd - > /dev/null
	rm -rf "$tmp"

	printf "Password store exported to %s using key %s\n" "agepass.tar.gz" "$key"
	printf "Import this using the same key with 'pass import'\n"
)

import_cmd() (
	store="agepass.tar.gz"

	if [ ! -f "$store" ]; then
		>&2 printf "%s: cannot find exported password store\n" "$argv0"
		exit 1
	fi

	if [ -d "$PASSDIR" ]; then
		>&2 printf "Detected pre-existing password store at %s\n" "$PASSDIR"
		>&2 printf "The 'pass import' command should be used for importing new password stores\n"
		exit 1
	fi

	mkdir -p "$storedir"

	tmp="$(mktemp -d)"
	mv "$store" "$tmp"

	cd "$tmp"

	tar -xzf "$store"
	mv .agepass/store "$storedir"
	echo "$AGEKEY" > "$PASSDIR"/key

	cd - > /dev/null

	rm -rf "$tmp"
)

rm_cmd() (
	_initialized

	if [ $# -eq 0 ]; then
		>&2 printf "usage: pass rm <names...>\n"
		exit 1
	fi

	for name in "$@"; do
		rm -f "$storedir/$name"
	done
)

rot_cmd() (
	_initialized

	name="$1"

	if [ -z "$name" ]; then
		>&2 printf "usage: pass rot <name>\n"
		exit 1
	fi

	_check "$name"

	file="$storedir/$name"
	curr=$(age -d -i "$(_privkey)" "$file")

	printf "New password: "

	password=$(_read)

	if [ "$password" = "$curr" ]; then
		>&2 printf "%s: new password cannot match current\n" "$argv0"
		exit 1
	fi

	echo "$password" > "$file"

	age -r "$(_pubkey)" "$file" > "$file.age"

	mv "$file.age" "$file"
)

cmd="$1"

if [ ! -z "$cmd" ]; then
	shift 1
fi

case "$cmd" in
	set)
		set_cmd "$@"
		;;
	get)
		get_cmd "$@"
		;;
	init)
		init_cmd
		;;
	export)
		export_cmd "$@"
		;;
	import)
		import_cmd
		;;
	ls)
		ls_cmd
		;;
	rm)
		rm_cmd "$@"
		;;
	rot)
		rot_cmd "$@"
		;;
	*)
		_usage
		;;
esac
